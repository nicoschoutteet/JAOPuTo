RAM = ram, Imax = imax, U = u, Fmax = fmax, FRM = frm, Fref = fref, FCore = fcore,
Fall = fall, Fuaf = fuaf, CVA = cva, IVA = iva, FtotalLTN = ftotalLtn,
starts_with("ptdf_")) %>%
return()
df <- API_GET$data %>%
tibble::as_tibble() %>%
tidyr::unnest(cols = c(contingencies),
names_sep = "_") %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = tso),
TSO_C = dplyr::case_match(contTso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = contTso)) %>%
select(DateTime, TSO, CNE_Name = cneName, CNE_EIC = cneEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo, SubstationFrom = substationFrom, SubstationTo = substationTo,
ElementType = elementType, FmaxType = fmaxType, TSO_C, C_Name = contingencies_branchName, C_EIC = contingencies_branchEic, Presolved = presolved,
RAM = ram, Imax = imax, U = u, Fmax = fmax, FRM = frm, Fref = fref, FCore = fcore,
Fall = fall, Fuaf = fuaf, UVA = uva, IVA = iva, FtotalLTN = ftotalLtn,
starts_with("ptdf_")) %>%
return()
df <- API_GET$data %>%
tibble::as_tibble() %>%
tidyr::unnest(cols = c(contingencies),
names_sep = "_") %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = tso),
TSO_C = dplyr::case_match(contTso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = contTso)) %>%
select(DateTime, TSO, CNE_Name = cneName, CNE_EIC = cneEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo, SubstationFrom = substationFrom, SubstationTo = substationTo,
ElementType = elementType, FmaxType = fmaxType, TSO_C, C_Name = contingencies_branchName, C_EIC = contingencies_branchEic, Presolved = presolved,
RAM = ram, Imax = imax, U = u, Fmax = fmax, FRM = frm, Fref = fref, FCore = fcore,
Fall = fall, Fuaf = fuaf, UVA = uva, IVA = iva,
starts_with("ptdf_")) %>%
return()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
df <- devtools::check()
df <- devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
savehistory()
readLines(".Rhistory")
?devtools::check()
check <- devtools::check()
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @import tidyr
#' @export
#'
#' @examples JAOPuTo_CoreID_IDCCb_finalcomputatation(as.POSIXct("2024-07-01 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-07-01 23:00", "Europe/Brussels"))
JAOPuTo_CoreID_IDCCb_finalcomputatation <- function(StartDateTime,
EndDateTime,
Presolved = TRUE) {
df <- tibble::tibble()
if(Presolved == TRUE) {
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_finalComputation",
query = list(
Filter = '{"Presolved":true}',
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
} else if (Presolved == FALSE) {
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/initialComputation",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text") %>%
jsonlite::fromJSON()
}
df <- API_GET$data %>%
tibble::as_tibble() %>%
tidyr::unnest(cols = c(contingencies),
names_sep = "_") %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = tso),
TSO_C = dplyr::case_match(contTso,
"ELIA" ~ "Elia",
"TENNETGMBH" ~ "TenneT GmbH",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETBV" ~ "TenneT BV",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
.default = contTso)) %>%
select(DateTime, TSO, CNE_Name = cneName, CNE_EIC = cneEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo, SubstationFrom = substationFrom, SubstationTo = substationTo,
ElementType = elementType, FmaxType = fmaxType, TSO_C, C_Name = contingencies_branchName, C_EIC = contingencies_branchEic, Presolved = presolved,
RAM = ram, Imax = imax, U = u, Fmax = fmax, FRM = frm, Fref = fref, FCore = fcore,
Fall = fall, Fuaf = fuaf, UVA = uva, IVA = iva,
starts_with("ptdf_")) %>%
return()
}
library(tidyverse)
JAOPuTo_CoreID_IDCCb_finalcomputatation(as.POSIXct("2024-07-01 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-07-01 23:00", "Europe/Brussels"))
JAOPuTo_CoreID_IDCCb_finalcomputatation(as.POSIXct("2024-07-01 00:00", "Europe/Brussels"),
as.POSIXct("2024-07-01 23:00", "Europe/Brussels"))
df <- JAOPuTo_CoreID_IDCCb_finalcomputatation(as.POSIXct("2024-07-01 00:00", "Europe/Brussels"),
as.POSIXct("2024-07-01 23:00", "Europe/Brussels"))
devtools::check()
check$errors
check <- devtools::check()
check <- devtools::check()
StartDateTime = now() - days(1)
EndDateTime = now()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_intradayAtc",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc) %>%
tidyr::pivot_longer(-DateTime,
names_to = "Variable",
values_to = "ATC") %>%
dplyr::mutate(BiddingZoneAbbFrom = stringr::str_split(Variable, "_", simplify = TRUE)[, 2],
BiddingZoneAbbTo = stringr::str_split(Variable, "_", simplify = TRUE)[, 3],
BiddingZoneFrom = dplyr::case_match(BiddingZoneAbbFrom,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
.default = BiddingZoneAbbFrom),
BiddingZoneTo = dplyr::case_match(BiddingZoneAbbTo,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
.default = BiddingZoneAbbTo)) %>%
dplyr::select(DateTime, BiddingZoneAbbFrom, BiddingZoneAbbTo, BiddingZoneFrom, BiddingZoneTo, ATC) %>%
return()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_intradayNtc",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc) %>%
tidyr::pivot_longer(-DateTime,
names_to = "Variable",
values_to = "ATC") %>%
dplyr::mutate(BiddingZoneAbbFrom = stringr::str_split(Variable, "_", simplify = TRUE)[, 2],
BiddingZoneAbbTo = stringr::str_split(Variable, "_", simplify = TRUE)[, 3],
BiddingZoneFrom = dplyr::case_match(BiddingZoneAbbFrom,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
.default = BiddingZoneAbbFrom),
BiddingZoneTo = dplyr::case_match(BiddingZoneAbbTo,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
.default = BiddingZoneAbbTo)) %>%
dplyr::select(DateTime, BiddingZoneAbbFrom, BiddingZoneAbbTo, BiddingZoneFrom, BiddingZoneTo, ATC) %>%
return()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_initialAtc",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_referenceNetPosition",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc) %>%
tidyr::pivot_longer(-DateTime,
names_to = "Variable",
values_to = "ReferenceNetPosition") %>%
dplyr::mutate(BiddingZoneAbb = stringr::str_extract(Variable, "(?<=_).*"),
BiddingZone = dplyr::case_match(BiddingZoneAbb,
"AL" ~ "Albania",
"BA" ~ "Bosnia",
"BG" ~ "Bulgaria",
"CH" ~ "Switzerland",
"DK1" ~ "Denmark 1",
"ES" ~ "Spain",
"GR" ~ "Greece",
"IT" ~ "Italy",
"ME" ~ "Montenegro",
"MK" ~ "Macedonia",
"PT" ~ "Portugal",
"RS" ~ "Serbia",
"TR" ~ "Turkey",
"UA" ~ "Ukraine")) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, ReferenceNetPosition) %>%
return()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_refprog",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc) %>%
tidyr::pivot_longer(-DateTime,
names_to = "Variable",
values_to = "ReferenceProgram") %>%
dplyr::mutate(BiddingZoneAbbFrom =  stringr::str_split(Variable, "_", simplify = TRUE)[, 2],
BiddingZoneAbbTo = stringr::str_split(Variable, "_", simplify = TRUE)[, 3],
BiddingZoneFrom = dplyr::case_match(BiddingZoneAbbFrom,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
"BG" ~ "Bulgaria",
"BA" ~ "Bosnia",
"CH" ~ "Switzerland",
"DK" ~ "Denmark",
"ES" ~ "Spain",
"PT" ~ "Portugal",
"GR" ~ "Greece",
"IT" ~ "Italy",
"ME" ~ "Montenegro",
"MK" ~ "Macedonia",
"RS" ~ "Serbia",
"UA" ~ "Ukraine",
"UK" ~ "United Kingdom",
"TR" ~ "Turkey",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"DK1" ~ "Denmark 1",
"DK2" ~ "Denmark 2",
"LT1" ~ "Lithuania 1",
"LT2" ~ "Lithuania 2",
"SE" ~ "Sweden",
"XK" ~ "Kosovo",
.default = BiddingZoneAbbFrom),
BiddingZoneTo = dplyr::case_match(BiddingZoneAbbTo,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia",
"BG" ~ "Bulgaria",
"BA" ~ "Bosnia",
"CH" ~ "Switzerland",
"DK" ~ "Denmark",
"ES" ~ "Spain",
"PT" ~ "Portugal",
"GR" ~ "Greece",
"IT" ~ "Italy",
"ME" ~ "Montenegro",
"MK" ~ "Macedonia",
"RS" ~ "Serbia",
"UA" ~ "Ukraine",
"UK" ~ "United Kingdom",
"TR" ~ "Turkey",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"DK1" ~ "Denmark 1",
"DK2" ~ "Denmark 2",
"LT1" ~ "Lithuania 1",
"LT2" ~ "Lithuania 2",
"SE" ~ "Sweden",
"XK" ~ "Kosovo",
.default = BiddingZoneAbbTo)) %>%
dplyr::select(DateTime, BiddingZoneAbbFrom, BiddingZoneAbbTo, BiddingZoneFrom, BiddingZoneTo, ReferenceProgram) %>%
return()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/coreid/api/data/IDCCB_validationReductions",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"ELIA" ~ "Elia",
"TRANSELECTRICA" ~ "Transelectrica",
"TRANSNETBW" ~ "TransnetBW",
"TENNETBV" ~ "TenneT BV",
"AMPRION" ~ "Amprion",
"50HERTZ" ~ "50Hertz",
"TENNETGMBH" ~ "TenneT GmbH",
.default = tso)) %>%
select(DateTime, TSO, CNEC_Name = cnecName, Direction = direction,
IVA = iva, Justification = justification,
starts_with("coreNp"),
Fallback = fallbackApplied) %>%
return()
library(tidyverse)
devtools::document()
devtools::check()
check <- devtools::check()
check$errors
check <- devtools::check()
devtools::document()
install.packages("devtools")
quarto install extension shafayetShafee/bsicons
quarto install extension shafayetShafee/bsicons
install.packages("devtools")
devtools::install_github("nicoschoutteet/JAOPuTo")
install.packages("devtools")
devtools::install_github("nicoschoutteet/JAOPuTo")
devtools::install_github("nicoschoutteet/JAOPuTo")
devtools::install_github("nicoschoutteet/JAOPuTo")
devtools::install_github("nicoschoutteet/JAOPuTo")
1
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"), as.POSIXct("2024-01-01 23:00", "CET"))
data <-JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"), as.POSIXct("2024-01-01 23:00", "CET"))
head(data)
?JAOPuTo::JAOPuTo_Core_netpositions()
data <- JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET"))
utils::head(data)
?JAOPuTo::JAOPuTo_Core_netpositions()
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET")) %>%
filter(BiddingZone == "Belgium") %>%
ggplot(aes(DateTime, NetPosition)) +
geom_line()
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET")) %>%
filter(BiddingZone == "Belgium") %>%
ggplot(aes(hour(DateTime), NetPosition)) +
geom_line()
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET")) %>%
filter(BiddingZone == "Belgium") %>%
ggplot(aes(hour(DateTime), NetPosition)) +
geom_line()
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET")) %>%
filter(BiddingZone == "Belgium") %>%
ggplot(aes(hour(DateTime), NetPosition)) +
geom_line()
JAOPuTo::JAOPuTo_Core_netpositions(as.POSIXct("2024-01-01 00:00", "CET"),
as.POSIXct("2024-01-01 23:00", "CET")) %>%
filter(BiddingZone == "Belgium") %>%
ggplot(aes(lubridate::hour(DateTime), NetPosition)) +
geom_line()
