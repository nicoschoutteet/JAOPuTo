"DK1_DE" ~ "Denmark West - Germany",
"DK2_KO" ~ "Denmark East - Kontek",
"DK1_CO" ~ "Denmark West - COBRA Cable",
"NO2_ND" ~ "Norway 2 - NordNed",
"NO2_NK" ~ "Norway 2 - NordLink",
"SE3_SWL" ~ "Sweden 3 - SWL",
"SE4_SWL" ~ "Sweden 4 - SWL")) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, ReferenceNetPosition) %>%
return()
unique(df$BiddingZone)
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/fbDomainBackup",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/fbDomainBackup",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/fbDomainBackup",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
))
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/data/fbDomainBackup",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/cgmForeCast",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/data/cgmForeCast",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation",
"coreNetPosition" ~ "Core net position"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("50Hertz", "Amprion", "Creos", "TennetGmbh", "Transnet") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TRUE ~ "DE"),
BiddingZone =dplyr::case_match(BiddingZoneAbb,
"ALBE" ~ "ALEGrO Belgium",
"ALDE" ~ "ALEGrO Germany",
"AT" ~ "Austria",
"BE" ~ "Belgium",
"CZ" ~ "Czech Republic",
"DE" ~ "Germany/Luxembourg",
"FR" ~ "France",
"HR" ~ "Croatia",
"HU" ~ "Hungary",
"NL" ~ "Netherlands",
"PL" ~ "Poland",
"RO" ~ "Romania",
"SI" ~ "Slovenia",
"SK" ~ "Slovakia"),
TSO = dplyr::case_when(Scope == "TSO" ~ case_match(TempHub,
"TennetGmbh" ~ "TenneT GmbH",
"Transnet" ~ "TransnetBW",
.default = TempHub),
TRUE ~ dplyr::case_match(BiddingZoneAbb,
"AT" ~ "APG",
"BE" ~ "Elia",
"CZ" ~ "CEPS",
"HR" ~ "HOPS",
"FR" ~ "RTE",
"HU" ~ "MAVIR",
"NL" ~ "TenneT BV",
"PL" ~ "PSE",
"RO" ~ "Transelectrica",
"SK" ~ "SEPS",
"SI" ~ "ELES"))) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, TSO, Scope, Value) %>%
return()
unique(df$BiddingZoneAbb)
unique(df$Scope)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value")
unique(df$TempVariable)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"))
unique(df$Variable)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"))
unique(df$TempHub)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"))
unique(df$Scope)
unique(df$TempHub)
unique(df$Scope)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
Scope == "Energinet" ~ "DK",
Scope == "Fingrid" ~ "FI",
Scope == "Statnett" ~ "NO",
Scope == "SvK" ~ "SE"))
unique(df$BiddingZoneAbb)
filter(df, is.na(BiddingZoneAbb))
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"))
unique(df$BiddingZoneAbb)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"),
BiddingZone =dplyr::case_match(BiddingZoneAbb,
"DK1" ~ "Demnark West",
"DK2" ~ "Denmark East",
"FI" ~ "Finland",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"NO5" ~ "Norway 5",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"SE3" ~ "Sweden 3",
"SE4" ~ "Sweden 4",
"DK" ~ "Denmark",
"NO" ~ "Norway",
"SE" ~ "Sweden"),
TSO = dplyr::case_when(Scope == "TSO" ~ case_match(TempHub,
"TennetGmbh" ~ "TenneT GmbH",
"Transnet" ~ "TransnetBW",
.default = TempHub),
TRUE ~ dplyr::case_match(BiddingZoneAbb,
"AT" ~ "APG",
"BE" ~ "Elia",
"CZ" ~ "CEPS",
"HR" ~ "HOPS",
"FR" ~ "RTE",
"HU" ~ "MAVIR",
"NL" ~ "TenneT BV",
"PL" ~ "PSE",
"RO" ~ "Transelectrica",
"SK" ~ "SEPS",
"SI" ~ "ELES"))) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, TSO, Scope, Value) %>%
return()
View(df)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"),
BiddingZone =dplyr::case_match(BiddingZoneAbb,
"DK1" ~ "Denmark West",
"DK2" ~ "Denmark East",
"FI" ~ "Finland",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"NO5" ~ "Norway 5",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"SE3" ~ "Sweden 3",
"SE4" ~ "Sweden 4",
"DK" ~ "Denmark",
"NO" ~ "Norway",
"SE" ~ "Sweden"),
TSO = dplyr::case_when(Scope == "TSO" ~ case_match(TempHub,
"TennetGmbh" ~ "TenneT GmbH",
"Transnet" ~ "TransnetBW",
.default = TempHub),
TRUE ~ dplyr::case_match(BiddingZoneAbb,
"AT" ~ "APG",
"BE" ~ "Elia",
"CZ" ~ "CEPS",
"HR" ~ "HOPS",
"FR" ~ "RTE",
"HU" ~ "MAVIR",
"NL" ~ "TenneT BV",
"PL" ~ "PSE",
"RO" ~ "Transelectrica",
"SK" ~ "SEPS",
"SI" ~ "ELES"))) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, TSO, Scope, Value) %>%
return()
View(df)
devtools::check()
devtools::document()
devtools::check()
options(max.print=10000)
devtools::check()
devtools::check(cleanup = "FALSE")
rlang::last_trace()
devtools::check()
df <- devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::chck()
devtools::check()
devtools::check(document = TRUE)
devtools::check(document = FALS)
devtools::check(document = FALSE)
devtools::check(document = FALSE)
devtools::check(document = FALSE)
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
library(tidvyverse)
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
)
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
JAOPuTo_nordic_m
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-11-04 00:00"))
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-11-04 00:00"))
View(df)
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-10-30 23:00"))
View(df)
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
StartDateTime = now()
EndDateTime =now()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages)
StartDateTime = as.POSIXct("2024-10-30 00:00", "Europe/Brussels")
EndDateTime = as.POSIXct("2024-11-30 23:00", "Europe/Brussels")
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-29 00:00", "Europe/Brussels"),
as.POSIXct("2024-10-29 23:00", "Europe/Brussels"))
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
