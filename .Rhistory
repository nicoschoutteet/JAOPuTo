"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"))
unique(df$BiddingZoneAbb)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"),
BiddingZone =dplyr::case_match(BiddingZoneAbb,
"DK1" ~ "Demnark West",
"DK2" ~ "Denmark East",
"FI" ~ "Finland",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"NO5" ~ "Norway 5",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"SE3" ~ "Sweden 3",
"SE4" ~ "Sweden 4",
"DK" ~ "Denmark",
"NO" ~ "Norway",
"SE" ~ "Sweden"),
TSO = dplyr::case_when(Scope == "TSO" ~ case_match(TempHub,
"TennetGmbh" ~ "TenneT GmbH",
"Transnet" ~ "TransnetBW",
.default = TempHub),
TRUE ~ dplyr::case_match(BiddingZoneAbb,
"AT" ~ "APG",
"BE" ~ "Elia",
"CZ" ~ "CEPS",
"HR" ~ "HOPS",
"FR" ~ "RTE",
"HU" ~ "MAVIR",
"NL" ~ "TenneT BV",
"PL" ~ "PSE",
"RO" ~ "Transelectrica",
"SK" ~ "SEPS",
"SI" ~ "ELES"))) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, TSO, Scope, Value) %>%
return()
View(df)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
dplyr::select(-id, -dateTimeUtc, -lastModifiedOn) %>%
tidyr::pivot_longer(-DateTime,
names_to = "TempVariable",
values_to = "Value") %>%
dplyr::mutate(Variable = dplyr::case_match(stringr::str_extract(TempVariable, "^[^_]+"),
"verticalLoad" ~ "Vertical load",
"generation" ~ "Generation"),
TempHub = stringr::str_extract(TempVariable, "(?<=_).*"),
Scope = dplyr::case_when(TempHub %in% c("Energinet", "Fingrid", "Statnett", "SvK") ~ "TSO",
TRUE ~ "Bidding Zone"),
BiddingZoneAbb = dplyr::case_when(Scope == "Bidding Zone" ~ TempHub,
TempHub == "Energinet" ~ "DK",
TempHub == "Fingrid" ~ "FI",
TempHub == "Statnett" ~ "NO",
TempHub == "SvK" ~ "SE"),
BiddingZone =dplyr::case_match(BiddingZoneAbb,
"DK1" ~ "Denmark West",
"DK2" ~ "Denmark East",
"FI" ~ "Finland",
"NO1" ~ "Norway 1",
"NO2" ~ "Norway 2",
"NO3" ~ "Norway 3",
"NO4" ~ "Norway 4",
"NO5" ~ "Norway 5",
"SE1" ~ "Sweden 1",
"SE2" ~ "Sweden 2",
"SE3" ~ "Sweden 3",
"SE4" ~ "Sweden 4",
"DK" ~ "Denmark",
"NO" ~ "Norway",
"SE" ~ "Sweden"),
TSO = dplyr::case_when(Scope == "TSO" ~ case_match(TempHub,
"TennetGmbh" ~ "TenneT GmbH",
"Transnet" ~ "TransnetBW",
.default = TempHub),
TRUE ~ dplyr::case_match(BiddingZoneAbb,
"AT" ~ "APG",
"BE" ~ "Elia",
"CZ" ~ "CEPS",
"HR" ~ "HOPS",
"FR" ~ "RTE",
"HU" ~ "MAVIR",
"NL" ~ "TenneT BV",
"PL" ~ "PSE",
"RO" ~ "Transelectrica",
"SK" ~ "SEPS",
"SI" ~ "ELES"))) %>%
dplyr::select(DateTime, BiddingZoneAbb, BiddingZone, TSO, Scope, Value) %>%
return()
View(df)
devtools::check()
devtools::document()
devtools::check()
options(max.print=10000)
devtools::check()
devtools::check(cleanup = "FALSE")
rlang::last_trace()
devtools::check()
df <- devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::chck()
devtools::check()
devtools::check(document = TRUE)
devtools::check(document = FALS)
devtools::check(document = FALSE)
devtools::check(document = FALSE)
devtools::check(document = FALSE)
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
library(tidvyverse)
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
)
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
#' @return a dataframe reflecting the data completeness for each of the data items (parameters) that can be consulted through the Publication Tool
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @export
#'
#' @examples JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
JAOPuTo_Nordic_monitoring <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
}
JAOPuTo_nordic_m
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-11-04 00:00"))
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-11-04 00:00"))
View(df)
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "CET"), as.POSIXct("2024-10-30 23:00"))
View(df)
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
df <- JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-30 00:00", "Europe/Brussels"),
as.POSIXct("2024-11-30 23:00", "Europe/Brussels"))
StartDateTime = now()
EndDateTime =now()
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages)
StartDateTime = as.POSIXct("2024-10-30 00:00", "Europe/Brussels")
EndDateTime = as.POSIXct("2024-11-30 23:00", "Europe/Brussels")
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/nordic/api/system/monitoring",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages)
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = StartDateTime) %>%
unnest(pages) %>%
dplyr::select(DateTime, Parameter = pages, Status = status, FollowUpActionInitiated = followUpActionInitiated) %>%
return()
JAOPuTo_Nordic_monitoring(as.POSIXct("2024-10-29 00:00", "Europe/Brussels"),
as.POSIXct("2024-10-29 23:00", "Europe/Brussels"))
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install_github("nicoschoutteet/JAOPuTo")
devtools::install_github("nicoschoutteet/JAOPuTo")
JAOPuTo::JAOPuTo_Nordic_maxnetpositions()
JAOPuTo::JAOPuTo_Nordic_maxnetpositions(now())
JAOPuTo::JAOPuTo_Nordic_maxnetpositions(lubridate::now())
JAOPuTo::JAOPuTo_Nordic_maxnetpositions(lubridate::now(), lubridate::now() + lubridate::hours(1))
JAOPuTo::JAOPuTo_Nordic_maxnetpositions(lubridate::now(), lubridate::now())
df <- JAOPuTo::JAOPuTo_Nordic_maxnetpositions(lubridate::now(), lubridate::now())
q()
df <- load_csv("data/Core SGM 6th release.csv")
df <- read_csv("data/Core SGM 6th release.csv")
#' Core - Intraday NTC
#'
#' @param StartDateTime POSIXct-class variable containing the start datetime for data download
#' @param EndDateTime POSIXct-class variable containing the end datetime for data download
#'
#' @return a dataframe containing the Net Transfer Capacities (NTC) for the intraday timeframe on Core borders
#' @export
#'
#' @examples JAOPuTo_Core_SGM
JAOPuTo_Core_SGM <- function() {
df <- read_csv("data/Core SGM 6th release.csv")
return()
}
JAOPuTo_Core_SGM()
library(readr)
JAOPuTo_Core_SGM()
#' Core - Intraday NTC
#'
#' @param StartDateTime POSIXct-class variable containing the start datetime for data download
#' @param EndDateTime POSIXct-class variable containing the end datetime for data download
#'
#' @return a dataframe containing the Net Transfer Capacities (NTC) for the intraday timeframe on Core borders
#' @export
#'
#' @examples JAOPuTo_Core_SGM
JAOPuTo_Core_SGM <- function() {
df_SGM <<- read_csv("data/Core SGM 6th release.csv")
return()
}
JAOPuTo_Core_SGM()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
df_SGM <<- read_csv("data/Core SGM 6th release.csv")
getwd()
file_path <- system.file("extdata", "your_file.csv", package = "JAOPuTo")
file_path <- system.file("inst/extdata", "your_file.csv", package = "JAOPuTo")
file_path <- system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo")
df_SGM <- read_csv("data/Core SGM 6th release.csv")
save(df_SGM, file = "data/Core SGM 6th release.rda")
df_SGM <- data("data/Core SGM 6th release.rda")
df_SGM <- data("data/Core SGM 6th release.rda")
data("data/Core SGM 6th release.rda")
df_SGM <- data("data/")
df_SGM <- data("data/Core SGM 6th release.rda")
usethis::use_directory("inst/extdata")
file_path <- system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo")
SGM_path <- system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo")
df_SGM <- read_csv(SGM_path)
devtools::document()
devtools::document()
#' Core - SGM
#'
#' @return a dataframe containing the Core Static Grid Model, including lines and transformers (source: SGM 6th release)
#' @import readr
#' @export
#'
#' @examples JAOPuTo_Core_SGM()
JAOPuTo_Core_SGM <- function() {
SGM_path <- system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo")
if (SGM_path = "") {
devtools::document()
devtools::check()
StartDateTime = now()
library(tidyverse)
StartDateTime = now()
EndDateTime = now() + hours(2)
#' @import tibble
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import lubridate
#' @import tidyr
#' @export
#'
#' @examples JAOPuTo_Core_shadowprices(as.POSIXct("2024-01-01 00:00", "Europe/Brussels"),
#' as.POSIXct("2024-01-01 23:00", "Europe/Brussels"))
JAOPuTo_Core_shadowprices <- function(StartDateTime,
EndDateTime) {
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/shadowPrices",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"Mavir" ~ "MAVIR",
"TennetBv" ~ "TenneT BV",
"Pse" ~ "PSE",
"Seps" ~ "SEPS",
"Apg" ~ "APG",
"Rte" ~ "RTE",
"TennetGmbh" ~ "TenneT GmbH",
"Hops" ~ "HOPS",
"TransnetBw" ~ "TransnetBW",
"Ceps" ~ "CEPS",
"Eles" ~ "Eles",
.default = tso)) %>%
select(DateTime, TSO, CNE_Name = cnecName, CNE_EIC = cnecEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo,
C_Name = contName, C_EIC = branchEic, ShadowPrice = shadowPrice,
RAM = ram, Imax = imax, Fmax = fmax, FRM = frm, Fref = fref, F0Core = f0core,
F0all = f0all, Fuaf = fuaf, AMR = amr, LTAMargin = ltaMargin, CVA = cva, IVA = iva, FtotalLTN = ftotalLtn,
starts_with("hub_")) %>%
rename_with(~ gsub("^hub_", "ptdf_", .), starts_with("hub_")) %>%
return()
}
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/shadowPrices",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"Mavir" ~ "MAVIR",
"TennetBv" ~ "TenneT BV",
"Pse" ~ "PSE",
"Seps" ~ "SEPS",
"Apg" ~ "APG",
"Rte" ~ "RTE",
"TennetGmbh" ~ "TenneT GmbH",
"Hops" ~ "HOPS",
"TransnetBw" ~ "TransnetBW",
"Ceps" ~ "CEPS",
"Eles" ~ "Eles",
.default = tso)) %>%
select(DateTime, TSO, CNE_Name = cnecName, CNE_EIC = cnecEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo,
C_Name = contName, C_EIC = branchEic, ShadowPrice = shadowPrice,
RAM = ram, Imax = imax, Fmax = fmax, FRM = frm, Fref = fref, F0Core = f0core,
F0all = f0all, Fuaf = fuaf, AMR = amr, LTAMargin = ltaMargin, CVA = cva, IVA = iva, FtotalLTN = ftotalLtn,
starts_with("hub_")) %>%
rename_with(~ gsub("^hub_", "ptdf_", .), starts_with("hub_")) %>%
return()
read_csv("extdata/Core SGM 6th release.csv")
read_csv(system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo"))
read_csv(system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo"))
StartDateTime = now()
EndDateTime = now() + hours(2)
df <- tibble::tibble()
API_GET <- httr::GET("https://publicationtool.jao.eu/core/api/data/shadowPrices",
query = list(
FromUtc = format(lubridate::with_tz(StartDateTime, "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z"),
ToUtc = format(lubridate::with_tz(EndDateTime + lubridate::hours(1), "UTC"),
"%Y-%m-%dT%H:%M:%S.0000Z")
)) %>%
httr::content(as = "text")%>%
jsonlite::fromJSON()
df <- API_GET$data %>%
tibble::as_tibble() %>%
dplyr::mutate(DateTime = lubridate::with_tz(as.POSIXct(dateTimeUtc, tz = "UTC",
format = "%Y-%m-%dT%H:%M:%SZ"),
"Europe/Brussels")) %>%
select(-id, -dateTimeUtc) %>%
dplyr::mutate(TSO = dplyr::case_match(tso,
"Mavir" ~ "MAVIR",
"TennetBv" ~ "TenneT BV",
"Pse" ~ "PSE",
"Seps" ~ "SEPS",
"Apg" ~ "APG",
"Rte" ~ "RTE",
"TennetGmbh" ~ "TenneT GmbH",
"Hops" ~ "HOPS",
"TransnetBw" ~ "TransnetBW",
"Ceps" ~ "CEPS",
"Eles" ~ "Eles",
.default = tso)) %>%
select(DateTime, TSO, CNE_Name = cnecName, CNE_EIC = cnecEic, Direction = direction,
BiddingZoneAbbFrom = hubFrom, BiddingZoneAbbTo = hubTo,
C_Name = contName, C_EIC = branchEic, ShadowPrice = shadowPrice,
RAM = ram, Imax = imax, Fmax = fmax, FRM = frm, Fref = fref, F0Core = f0core,
F0all = f0all, Fuaf = fuaf, AMR = amr, LTAMargin = ltaMargin, CVA = cva, IVA = iva, FtotalLTN = ftotalLtn,
starts_with("hub_")) %>%
rename_with(~ gsub("^hub_", "ptdf_", .), starts_with("hub_")) %>%
left_join(read_csv(system.file("extdata", "Core SGM 6th release.csv", package = "JAOPuTo"))) %>%
return()
